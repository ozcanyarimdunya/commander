{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Commander \u00a4 A very simple tool to create beautiful console application by using native argparse. Project Tabler Author \u00d6zcan Yar\u0131md\u00fcnya Documentation https://ozcanyarimdunya.github.io/commander/ Source code https://github.com/ozcanyarimdunya/commander commander is a library that you can create beautiful class based cli application by using argparse . Installation \u00a4 Only python3.7+ required, no extra dependencies. pip install commander-py Usage \u00a4 Basic usage, let's greet someone :) Create a file named myapp.py . Import required classes from commander library from commander import Application from commander import Command Define your first command. create is the method where you define your cli arguments handle is the method where you use entered arguments. class GreetCommand ( Command ): name = \"greet\" description = \"Greet command\" def add_arguments ( self , parser ): \"\"\"Create your cli arguments here\"\"\" parser . add_argument ( \"-n\" , \"--name\" , help = \"Name of sample\" ) def handle ( self , ** arguments ): \"\"\"Do things with your arguments here\"\"\" name = arguments [ \"name\" ] print ( f \"Greetings { name } :)\" ) Create your commander application and register the command then run. if __name__ == '__main__' : app = Application ( name = \"myapp\" , description = \"My first commander application\" ) app . register ( GreetCommand ) app . run () Now test your first application Simple usage. # Command $ python myapp.py greet -n \"John Doe\" # Output Greetings John Doe :) Subcommand greet subcommand also have its own help function. # Command $ python myapp.py greet --help # Output USAGE: myapp greet [-h] [-n NAME] Greeting command OPTIONAL ARGUMENTS: -h, --help show this help message and exit -n NAME, --name NAME Name of sample The main application myapp has its own help function, you can see greet command in the AVAILABLE COMMANDS section # Command $ python myapp.py --help # Output USAGE: myapp [-h] {greet} My first commander application OPTIONAL ARGUMENTS: -h, --help show this help message and exit AVAILABLE COMMANDS: greet Greeting command Test \u00a4 This project using pytest and pytest-cov . make test Documentation \u00a4 Live preview make serve-docs Building build-docs LICENSE \u00a4 MIT License Copyright (c) 2022 yarimdunya.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Home"},{"location":"#commander","text":"A very simple tool to create beautiful console application by using native argparse. Project Tabler Author \u00d6zcan Yar\u0131md\u00fcnya Documentation https://ozcanyarimdunya.github.io/commander/ Source code https://github.com/ozcanyarimdunya/commander commander is a library that you can create beautiful class based cli application by using argparse .","title":"Commander"},{"location":"#installation","text":"Only python3.7+ required, no extra dependencies. pip install commander-py","title":"Installation"},{"location":"#usage","text":"Basic usage, let's greet someone :) Create a file named myapp.py . Import required classes from commander library from commander import Application from commander import Command Define your first command. create is the method where you define your cli arguments handle is the method where you use entered arguments. class GreetCommand ( Command ): name = \"greet\" description = \"Greet command\" def add_arguments ( self , parser ): \"\"\"Create your cli arguments here\"\"\" parser . add_argument ( \"-n\" , \"--name\" , help = \"Name of sample\" ) def handle ( self , ** arguments ): \"\"\"Do things with your arguments here\"\"\" name = arguments [ \"name\" ] print ( f \"Greetings { name } :)\" ) Create your commander application and register the command then run. if __name__ == '__main__' : app = Application ( name = \"myapp\" , description = \"My first commander application\" ) app . register ( GreetCommand ) app . run () Now test your first application Simple usage. # Command $ python myapp.py greet -n \"John Doe\" # Output Greetings John Doe :) Subcommand greet subcommand also have its own help function. # Command $ python myapp.py greet --help # Output USAGE: myapp greet [-h] [-n NAME] Greeting command OPTIONAL ARGUMENTS: -h, --help show this help message and exit -n NAME, --name NAME Name of sample The main application myapp has its own help function, you can see greet command in the AVAILABLE COMMANDS section # Command $ python myapp.py --help # Output USAGE: myapp [-h] {greet} My first commander application OPTIONAL ARGUMENTS: -h, --help show this help message and exit AVAILABLE COMMANDS: greet Greeting command","title":"Usage"},{"location":"#test","text":"This project using pytest and pytest-cov . make test","title":"Test"},{"location":"#documentation","text":"Live preview make serve-docs Building build-docs","title":"Documentation"},{"location":"#license","text":"MIT License Copyright (c) 2022 yarimdunya.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"tutorial/","text":"Tutorial \u00a4 Let's have cli that user can reverse, capitalize or randomize a word. For example, if your entered Football string then; reverse command will convert word to llabtooF capitalize command will convert word to FOOTBALL randomize command will convert word to otblalof For the simplicity we will have cli prompt given below. python app.py reverse --word \"Football\" # or python app.py capitalize --word \"Football\" # or python app.py randomize --word \"Football\" Let's start! First create a python file app.py and import commander classes. import random from commander import Application from commander import Command Now let's create our first command reverse . class ReverseCommand ( Command ): name = \"reverse\" description = \"Reverse a word\" def add_arguments ( self , parser ): parser . add_argument ( \"--word\" , help = \"Word to reverse\" ) def handle ( self , ** arguments ): word = arguments [ \"word\" ] reverse = word [:: - 1 ] print ( f \"Reverse of { word } is { reverse } .\" ) Here parser.add_argument(\"--word\", help=\"Word to reverse\") we add --word argument, to get word from cli. Here word = arguments[\"word\"] we get value of --word argument. Let's define rest of the commands. class CapitalizeCommand ( Command ): name = \"capitalize\" description = \"Capitalize a word\" def add_arguments ( self , parser ): parser . add_argument ( \"--word\" , help = \"Word to capitalize\" ) def handle ( self , ** arguments ): word = arguments [ \"word\" ] capitalize = word . capitalize () self . write ( f \"Capitalized of ' { word } ' is { capitalize } .\" , style = self . red ) class RandomizeCommand ( Command ): name = \"randomize\" description = \"Randomize a word\" def add_arguments ( self , parser ): parser . add_argument ( \"--word\" , help = \"Word to randomize\" ) def handle ( self , ** arguments ): word = arguments [ \"word\" ] randomize = random . sample ( word , len ( word )) randomize = \"\" . join ( randomize ) self . success ( f \"Randomize of { word } is { randomize } .\" ) Here self.write(f\"Capitalized of '{word}' is {capitalize}.\", style=self.red) we add write function with style=self.red to print a red text. Here self.success(f\"Randomize of {word} is {randomize}.\") we add success function to print a success text. For more color and styles check Printer and styles, Now let's create our main application and register commands. if __name__ == \"__main__\" : app = Application ( name = \"app\" , description = \"Simple word operation\" ) app . register ( ReverseCommand ) app . register ( CapitalizeCommand ) app . register ( RandomizeCommand ) app . run () Let's test. First let's directly run app.py, it should give and error and ask for a command. # command python app.py # output USAGE: app [-h] {reverse,capitalize,randomize} app: error: the following arguments are required: command Let's have a try --help option # command python app.py --help # output USAGE: app [-h] {reverse,capitalize,randomize} Simple word operation OPTIONAL ARGUMENTS: -h, --help show this help message and exit AVAILABLE COMMANDS: reverse Reverse a word capitalize Capitalize a word randomize Randomize a word Now it is more clear, see :) Let's have a try --help option for reverse command. # command python app.py reverse --help # output USAGE: app reverse [-h] [--word WORD] Reverse a word OPTIONAL ARGUMENTS: -h, --help show this help message and exit --word WORD Word to reverse As expected ! Now let's try --word argument for reverse command! # command python app.py reverse --word \"Test\" # output Reverse of Test is tseT. And it worked! Now test the others by yourself :) Cheers.","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"Let's have cli that user can reverse, capitalize or randomize a word. For example, if your entered Football string then; reverse command will convert word to llabtooF capitalize command will convert word to FOOTBALL randomize command will convert word to otblalof For the simplicity we will have cli prompt given below. python app.py reverse --word \"Football\" # or python app.py capitalize --word \"Football\" # or python app.py randomize --word \"Football\" Let's start! First create a python file app.py and import commander classes. import random from commander import Application from commander import Command Now let's create our first command reverse . class ReverseCommand ( Command ): name = \"reverse\" description = \"Reverse a word\" def add_arguments ( self , parser ): parser . add_argument ( \"--word\" , help = \"Word to reverse\" ) def handle ( self , ** arguments ): word = arguments [ \"word\" ] reverse = word [:: - 1 ] print ( f \"Reverse of { word } is { reverse } .\" ) Here parser.add_argument(\"--word\", help=\"Word to reverse\") we add --word argument, to get word from cli. Here word = arguments[\"word\"] we get value of --word argument. Let's define rest of the commands. class CapitalizeCommand ( Command ): name = \"capitalize\" description = \"Capitalize a word\" def add_arguments ( self , parser ): parser . add_argument ( \"--word\" , help = \"Word to capitalize\" ) def handle ( self , ** arguments ): word = arguments [ \"word\" ] capitalize = word . capitalize () self . write ( f \"Capitalized of ' { word } ' is { capitalize } .\" , style = self . red ) class RandomizeCommand ( Command ): name = \"randomize\" description = \"Randomize a word\" def add_arguments ( self , parser ): parser . add_argument ( \"--word\" , help = \"Word to randomize\" ) def handle ( self , ** arguments ): word = arguments [ \"word\" ] randomize = random . sample ( word , len ( word )) randomize = \"\" . join ( randomize ) self . success ( f \"Randomize of { word } is { randomize } .\" ) Here self.write(f\"Capitalized of '{word}' is {capitalize}.\", style=self.red) we add write function with style=self.red to print a red text. Here self.success(f\"Randomize of {word} is {randomize}.\") we add success function to print a success text. For more color and styles check Printer and styles, Now let's create our main application and register commands. if __name__ == \"__main__\" : app = Application ( name = \"app\" , description = \"Simple word operation\" ) app . register ( ReverseCommand ) app . register ( CapitalizeCommand ) app . register ( RandomizeCommand ) app . run () Let's test. First let's directly run app.py, it should give and error and ask for a command. # command python app.py # output USAGE: app [-h] {reverse,capitalize,randomize} app: error: the following arguments are required: command Let's have a try --help option # command python app.py --help # output USAGE: app [-h] {reverse,capitalize,randomize} Simple word operation OPTIONAL ARGUMENTS: -h, --help show this help message and exit AVAILABLE COMMANDS: reverse Reverse a word capitalize Capitalize a word randomize Randomize a word Now it is more clear, see :) Let's have a try --help option for reverse command. # command python app.py reverse --help # output USAGE: app reverse [-h] [--word WORD] Reverse a word OPTIONAL ARGUMENTS: -h, --help show this help message and exit --word WORD Word to reverse As expected ! Now let's try --word argument for reverse command! # command python app.py reverse --word \"Test\" # output Reverse of Test is tseT. And it worked! Now test the others by yourself :) Cheers.","title":"Tutorial"},{"location":"wstyles/","text":"Printer and styles \u00a4 List of printers Printers write info success warn danger comment and list of styles Styles black red green yellow blue magenta cyan white bold faint italic underline blink blink2 negative concealed crossed You can use in handle method like below. self . printer ( self . style ( text )) Example: def handle ( self , ** arguments ): self . success ( f \"Hello { self . red ( 'red text' ) } , { self . green ( 'green text' ) } .\" )","title":"Printer and styles"},{"location":"wstyles/#printer-and-styles","text":"List of printers Printers write info success warn danger comment and list of styles Styles black red green yellow blue magenta cyan white bold faint italic underline blink blink2 negative concealed crossed You can use in handle method like below. self . printer ( self . style ( text )) Example: def handle ( self , ** arguments ): self . success ( f \"Hello { self . red ( 'red text' ) } , { self . green ( 'green text' ) } .\" )","title":"Printer and styles"}]}